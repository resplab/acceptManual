### Exacerbation Rate Prediction

```{r get-prediction, eval = TRUE, echo = TRUE}
results = predictACCEPT(samplePatients)
head(results)
```

```{r setup-prediction, eval = TRUE, echo = FALSE}
rox = c("Title", "Description", "patientData", "random_sampling_N",
        "calculate_CIs",
        "random_distribution_iteration", "Returns")
values = c("Predict ACCEPT", "Predicts COPD exacerbation rate by severity level",
           "patient data matrix, can have one or many patients in it",
           "number of random sampling. Default is 1000.",
           "boolean: whether to calculate confidence interval of the mean",
           "TODO",
           "patientData with prediction for exacerbation rate")
metadata = data.frame(ROxygen2 = rox, Details = values)
```


```{r predict-ACCEPT, eval = TRUE, echo = FALSE}
knitr::kable(
  metadata, booktabs = TRUE
)
```

### Number of Exacerbations Prediction

```{r get-exacerbations, eval = TRUE, echo = TRUE}
numExacerbations = predictCountProb(results, n = 10, shortened = TRUE)
head(numExacerbations)
```

```{r setup-exacerbations, eval = TRUE, echo = FALSE}
rox = c("Title", "Description", "patientResults", "n",
        "shortened", "Returns")
values = c("Predict Exacerbation Number", "Predicts probability of observing a certain number of exacerbations",
           "patient results matrix, produced by predictAccept",
           "how many exacerbations to consider",
           "TODO",
           "matrix of probabilities with the number of exacerbations as rows and number of severe exacerbations as columns")
metadata = data.frame(ROxygen2 = rox, Details = values)
```

```{r exacerbations-2, eval = TRUE, echo = FALSE}
knitr::kable(
  metadata, booktabs = TRUE
)
```

### FEV1 Projection Model 4 (Extended Model) {-}

The function **fev4_projection()** is the extended model, including the O'Conner Slope and FEV1 score from previous year. The arguments are described in the table below.

```{r setup-proj4, eval = TRUE, echo = FALSE}
rox = c("fev1_0","fev1_prev", "int_effect","male", "smoking", "age", "weight", "height","oco", "tio")
types = c("numeric","numeric", "numeric", "integer", "integer", "integer", "numeric","numeric","numeric", "string")
values = c("Baseline FEV1 score (L)",
           "FEV1 score from previous year (L)",
           "Effect of intervention on lung function (L)",
           "1 = Male, 0 = Female",
           "1 = Smoker, 0 = Non-Smoker",
           "Patient age in years",
           "Patient weight (kg)",
           "Patient height (m)",
           "O'Connor Slope",
           "is the patient taking tiotropium, 'Yes' or 'No'?")
metadata = data.frame(Parameter = rox, Type = types, Description = values)
```
```{r table-proj4, eval = TRUE, echo = FALSE}
knitr::kable(
  metadata, booktabs = TRUE
)
```

```{r chart-proj4, eval = TRUE, echo = TRUE}
patientData = samplePatients[1,]
results = fev1_projection4(fev1_0 = patientData$fev1_0,
                                        fev1_prev = patientData$fev1_prev,
                                        int_effect = patientData$int_effect,
                                        male = patientData$male,
                                        smoking = patientData$smoking,
                                        age = patientData$age,
                                        weight = patientData$weight,
                                        height = patientData$height,
                                        oco = patientData$oco,
                                        tio = patientData$tio)$df
chart = projectionChart(results)
chart
```

# Using the Package as an API (PRISM)

PRISM (Programmable Interface for Simulation/Statistical Models) is a package which provides a user-friendly API interface in R for clinical prediction and decision analytics models hosted on UBC PRISM cloud.

For more information, the PRISM package can be found on GitHub at [PRISM on  GitHub](https://github.com/resplab/prism).

## PRISM in R

To install PRISM in R, you will need to install it from GitHub. In an R Console:
```{r prism-r, eval = FALSE, echo = TRUE}
devtools::install_github("resplab/prism")
```

To use PRISM in R:
```{r prism-api-r, eval = TRUE, echo = FALSE}
your_api_key = 123456
```

```{r prism-fev1, eval = TRUE, echo = TRUE}
library(prism)
connect_to_model("fev1Prism", api_key = your_api_key)
patient1 <- fev1::samplePatients[1,]
model_run(patient1)
res <- as.data.frame(model_run(patient1))
```

## PRISM in Shell

### Linux

You will need curl installed to use the API. To check if you have curl:
```{bash prism-curl, eval = FALSE, echo = TRUE}
dpkg -l curl
```

If you do not have curl, you can install it by:
```{bash prism-curl-install, eval = FALSE, echo = TRUE}
sudo apt install curl
```

```{bash prism-linux, eval = FALSE, echo = TRUE}

curl -X POST -H "Content-Type: application/json" -d '{"api_key":["YOUR_API_KEY"],"func":["prism_model_run"],"model_input":[{"ID":"10001","male":1,"age":70,"smoker":1,"FEV1":2.5,"height":1.68,"weight":65}]}' http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json
```

```{bash prism-linux2, eval = TRUE, echo = FALSE}

curl -X POST -H "Content-Type: application/json" -d '{"api_key":[123456],"func":["prism_model_run"],"model_input":[{"ID":"10001","male":1,"age":70,"smoker":1,"FEV1":2.5,"height":1.68,"weight":65}]}' http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json
```
### Mac OS

You will need curl installed to use the API. To check if you have curl:
```{bash prism-curl-mac, eval = FALSE, echo = TRUE}
brew list curl
```

If you do not have curl, you can install it using HomeBrew:
```{bash prism-curl-install-mac, eval = FALSE, echo = TRUE}
brew install curl
```

```{bash prism-mac, eval = FALSE, echo = TRUE}

curl -X POST -H "Content-Type: application/json" -d '{"api_key":["YOUR_API_KEY"],"func":["prism_model_run"],"model_input":[{"ID":"10001","male":1,"age":70,"smoker":1,"FEV1":2.5,"height":1.68,"weight":65}]}' http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json
```

```{bash prism-mac2, eval = TRUE, echo = FALSE}

curl -X POST -H "Content-Type: application/json" -d '{"api_key":[123456],"func":["prism_model_run"],
"model_input":[{"ID":"10001","male":1,"age":70,"smoker":1,"FEV1":2.5,"height":1.68,"weight":65}]}' http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json
```

### Windows PowerShell

In PowerShell:

```{bash prism-windows, eval=FALSE, echo = TRUE}
curl -Body '{"api_key":["YOUR_API_KEY"],"func":["prism_model_run"],"model_input":[{"ID":"10001","male":1,"age":70,"smoker":1,"FEV1":2.5,"height":1.68,"weight":65}]}' -Method POST -uri http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json -Headers @{"Content-type"="application/json"}
```

```{bash prism-windows2, eval = TRUE, echo = FALSE}

curl -X POST -H "Content-Type: application/json" -d '{"api_key":[123456],"func":["prism_model_run"],
"model_input":[{"ID":"10001","male":1,"age":70,"smoker":1,"FEV1":2.5,"height":1.68,"weight":65}]}' http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json
```


## PRISM in Python

To get started, you will need to import the **json** and **requests** libraries. To install, open a terminal:

```{bash prism-python, eval = FALSE, echo = TRUE, engine.path = '/usr/bin/python3'}
pip3 install requests
```

We will start with the GET request. If everything is working, this should return 200 as a response.

```{python prism-python-get, eval = TRUE, echo = TRUE, engine.path = '/usr/bin/python3'}
import json
import requests
response = requests.get("http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json")
print(response)
```

For the POST request, we will send some patient data to the API, and should get a prediction back from the API.

```{python prism-python2, eval = FALSE, echo = TRUE, engine.path = '/usr/bin/python3'}
api_key = 'YOUR_API_KEY'
patientInput = [{
"ID":"10001",
"male":1,
"age":70,
"smoker":1,
"FEV1":2.5,
"height":1.68,
"weight":65
}]
response = requests.post("http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json",
  json = {"api_key":[api_key],
  "func": ["prism_model_run"],
  "model_input": patientInput})
print(response)
results = json.loads(response.text)
print(results)
```

```{python prism-python3, eval = TRUE, echo = FALSE, engine.path = '/usr/bin/python3'}
response = requests.post("http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json", json = {"api_key":[123456],"func":["prism_model_run"],"model_input":[{"ID":"10001","male":1,"age":70,"smoker":1,"FEV1":2.5,"height":1.68,"weight":65}]})
print(response)
results = json.loads(response.text)
print(results)
```

We will put the results in a dictionary:

```{python prism-python4, eval = TRUE, echo = TRUE, engine.path = '/usr/bin/python3'}
resultsDict = json.loads(results[0])
print(resultsDict)
columnNames = list(resultsDict.keys())
print(columnNames)
```

To visualize the results using the package PrettyTable:

```{python prism-python5, eval = TRUE, echo = TRUE, engine.path = '/usr/bin/python3'}
from prettytable import PrettyTable
table = PrettyTable()
table = PrettyTable()
table.align["Year"] = "l" # Left align year
table.padding_width = 1 # One space between column edges and contents (default)
print(columnNames)
for col in columnNames:
    table.add_column(col, resultsDict[col])
print(table)
```

## PRISM in Javascript

To use the PRISM API in Javascript, you will need to use the XMLHttpRequest module. We will start by sending a GET request:

```{js, eval=FALSE, echo=TRUE}
request = new XMLHttpRequest();
request.open('GET', 'http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json');
request.send();
```

The **onreadystatechange** is an XMLHttpRequest event which updates when the ready state changes. The ready state can be either 1, 2, 3, or 4.
```{r javascript1, eval = TRUE, echo = FALSE}
dev.off()
readyState = c(0, 1, 2, 3, 4)
values = c("Unsent", "Opened: open() has been called",
           "Headers Received: send() has been called and headers are available",
           "Loading: downloading; responseText holds partial data",
           "Done: the operation is complete")
metadata = data.frame("readyState"=readyState, Description = values)
names(metadata) = c("Ready State", "Description")
```

```{r javascript2, eval = TRUE, echo = FALSE}
knitr::kable(
  metadata, booktabs = TRUE
)
```

```{js, eval=FALSE, echo=TRUE}
request.onreadystatechange = function() {
            if(request.readyState === 4) { //
                if(request.status === 200) {
                    console.log(request.responseText);
                } else {
                		console.log(request.status);
                }
            }
        }
```

To get a prediction, we can send a POST request. We will first create an example patient using json:

```{js, eval=FALSE}
let patient = JSON.stringify({
  api_key: 123456,
  func: ["prism_model_run"],
  model_input: [{
    ID: 10001,
    male: 1,
    age: 70,
    smoker: 1,
    FEV1: 2.5,
    height: 1.68,
    weight: 65
  }]
});
```

We need to set the request header to json, and then send our patient json to the PRISM server using the **request.send()** function.

```{js, eval=FALSE}
request.open('POST', 'http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json');
request.setRequestHeader('Content-Type', 'application/json');
request.send(patient); // Send request
let results = request.response;
```
