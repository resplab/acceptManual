[
["section-introduction.html", "Acute COPD Exacerbation Prediction Tool (ACCEPT) 1 Introduction", " Acute COPD Exacerbation Prediction Tool (ACCEPT) 1 Introduction The purpose of this package is to predict future COPD exacerbation rates and severity based on past exacerbation rates. It might be helpful to take a look at the ACCEPT web application before reading further, as this gives a visualization of the package: ACCEPT Web Application. "],
["section-thestudy.html", "2 The Study 2.1 Background 2.2 The Study Population 2.3 Data Collection: Combined Trials 2.4 Validation", " 2 The Study The accept package and application are based on the paper Development and External Validation of the Acute COPD Exacerbation Prediction Tool (ACCEPT), published in 2019. 2.1 Background Chronic Obstructive Pulmonary Disease (COPD) affects 300 million people worldwide. Patients with COPD often experience what is called an acute exacerbation. exacerbation: acute worsening of COPD symptoms; acute means sudden onset, short in duration; COPD symptoms include shortness of breath, wheezing, coughing up mucus, etc. Exacerbation Causes Bacterial Infections Common Viral Infections Air Pollution Cold Weather Interruption of Treatment Exacerbation Severity Mild Moderate Severe Patient has an increased need for medication, but does not need hospital care. Patient has an increased need for medication, and seeks medical assistance. Patient (caregiver) recongizes rapid deterioration in condition, requiring hospitalization. References COPD exacerbations: definitions and classifications Toward a consensus definition for COPD exacerbations 2.2 The Study Population The data for this study was taken from three different studies: MACRO Clinical Trial MACRO Paper STATCOPE Clinical Trial STATCOPE Paper OPTIMAL Clinical Trial OPTIMAL Paper Clinical Trial 1: MACRO Number of Participants: 1142 Type of Study: Clinical Randomized Masking: Triple (Participant, Investigator, Care-Provider) Criteria Age: &gt; 40 years old COPD diagnosis Does not have asthma 10 pack years or more of smoking Study Groups &nbsp;&nbsp;&nbsp; Placebo Sugar Pill The placebo group was given a sugar pill capsule to take once every day for 12 months. &nbsp;&nbsp;&nbsp; Treatment Azithromycin (macrolide antibiotic) The treatment group was given a 250 mg capsule of Azithromycin (macrolide antibiotic) to take once every day for 12 months. Data Collection: Primary Metric Number of COPD Exacerbations The purpose of this study was to investigate the effects of azithromycin treatment on exacerbation rate. The number of COPD exacerbations during the 12 months of the study is the primary metric. Number of Years: 1 year Clinical Trial 2: STATCOPE Number of Participants: 885 Type of Study: Clinical Randomized Masking: Triple (Participant, Investigator, Care-Provider) Criteria Age: 40 - 80 years old COPD diagnosis Does not have asthma 10 pack years or more of smoking Study Groups &nbsp;&nbsp;&nbsp; Placebo Sugar Pill The placebo group was given a sugar pill capsule to take once every day for 37 months. &nbsp;&nbsp;&nbsp; Treatment Simvastatin The treatment group was given 40 mg of simvastatin to take once every day for 37 months. Data Collection: Primary Metric Rate of COPD Exacerbations The purpose of this study was to investigate the effects of azithromycin treatment on exacerbation rate. The number of COPD exacerbations per year during the 37 months of the study is the primary metric. Number of Years: 3 years Clinical Trial 3: OPTIMAL Number of Participants: 432 Type of Study: Clinical Randomized Masking: Double (Participant, Investigator) Criteria Age: &gt; 35 years old COPD diagnosis Does not have asthma 10 pack years or more of smoking at least 1 COPD exacerbation in the last year Study Groups &nbsp;&nbsp;&nbsp; Placebo Tiotropium + Placebo Inhaler The placebo group was given 2 puffs/day from a placebo inhaler for 12 months &nbsp;&nbsp;&nbsp; Treatment 1 Tiotropium + Salmeterol Inhaler The treatment group was given 2 puffs/day from a Salmeterol inhaler containing 25 ug/puff of salmeterol for 12 months. &nbsp;&nbsp;&nbsp; Treatment 2 Tiotropium + (Salmeterol + Fluticasone) Inhaler The treatment group was given 2 puffs/day from an Advair inhaler containing 25 ug/puff of salmeterol and 250 ug/puff of fluticasone for 12 months. Data Collection: Primary Metric Number of COPD Exacerbations The purpose of this study was to investigate the effects of Salmeterol and/or Advair treatment on exacerbation rate. The number of COPD exacerbations during the 12 months of the study is the primary metric. Number of Years: 3 years 2.3 Data Collection: Combined Trials For our study, we combined the results from the three trials described above. Primary Metric Exacerbation Rate The purpose of this study was determine the exacerbation rate of a patient, defined as the # exacerbations / year. We break this down into severe exacerbation rate and overall exacerbation rate. Additionally, we include the results from the MACRO study to predict exacerbation rate with and without the use of Azithromycin as a treatment. Secondary Metrics Exacerbation History FEV1 % Predicted Smoking Status Age (years) Gender (male or female) Oxygen Therapy SGRQ Score BMI LAMAs LABAs ICs Statins Number of exacerbations (severe and mild/moderate) in the last year. Prediction % FEV1 Score. Whether or not a patient currently smokes. 1 = smoker, 0 = non-smoker Patient age at the beginning of the study. For the purpose of this study, we only looked at \"Male\" and \"Female\" genders. Domiciliary Oxygen Therapy: At-home oxygen therapy, used to treat COPD. This metric measures whether or not a patient uses oxygen therapy, 1 = Yes, 0 = No. St. George's Respiratory Questionnaire: This questionnaire is to help doctors/patients determine how much COPD is affecting day-to-day life. The score from the questionnaire is correlated to cough, sputum, and wheezing symptoms. Questionnaire Download SGRQ Overview Body Mass Index: ratio of weight (kg) to height squared (m^2) Long-Acting Muscarinic receptor Antagonists: used for treatment of COPD. This metric asks whether or not a patient has used LAMAs in the past year. Long-Acting β2 Agonists: used for treatment of COPD. This metric asks whether or not a patient has used LABAs in the past year. Inhaled Glucocorticoids: used for treatment of COPD. This metric asks whether or not a patient has used inhaled glucocorticoids in the past year. Statins: generally used to lower cholesteral in blood, but some studies have recently shown they can be effective in COPD treatment. This metric asks whether or not a patient has used statins in the past year. 2.4 Validation We generated our regression model based on the OPTIMAL, STATCOPE, and MACRO studies. To test how well this model performed with new data, we used a fourth study, ECLIPSE. Details of the study can be found here: Evaluation of COPD Longitudinally to Identify Predictive Surrogate Endpoints. Criteria Age: 40 - 75 years old COPD diagnosis Does not have asthma 10 pack years or more of smoking at least 1 COPD exacerbation in the last year "],
["section-packageinR.html", "3 Using the Package in R 3.1 Installation 3.2 ACCEPT Prediction Functions", " 3 Using the Package in R 3.1 Installation If you do not have R installed on your computer, please go to Appendix 1. Once you have R installed, you can install this package in the R console: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;resplab/accept&quot;) 3.2 ACCEPT Prediction Functions Sample Data To get started, there is an R data frame with the package of sample patient data. I have printed columns 1-13 and 14-19 separately because there isn’t enough space: library(accept) samplePatients = accept::samplePatients print(samplePatients[,1:13]) &gt; # A tibble: 2 x 13 &gt; ID male age smoker oxygen statin LAMA LABA ICS FEV1 BMI &gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &gt; 1 10001 1 70 1 1 1 1 1 1 33 25 &gt; 2 10002 0 42 0 1 0 1 1 0 40 35 &gt; # … with 2 more variables: SGRQ &lt;dbl&gt;, LastYrExacCount &lt;dbl&gt; print(samplePatients[,14:19]) &gt; # A tibble: 2 x 6 &gt; LastYrSevExacCo… randomized_azit… randomized_stat… randomized_LAMA &gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &gt; 1 1 0 0 0 &gt; 2 0 0 0 0 &gt; # … with 2 more variables: randomized_LABA &lt;dbl&gt;, randomized_ICS &lt;dbl&gt; ID male age smoker oxygen statin LAMA LABA ICS FEV1 BMI SGRQ LastYrExacCount LastYrSevExacCount randomized_azithromycin randomized_statin randomized_LAMA randomized_LABA randomized_ICS Patient ID. This is useful if you want to look at many patients at once. If you don't have an ID, you can just make up a number here. Gender of the patient. 1 = male, 0 = female Patient age at the beginning of the study. Whether or not a patient currently smokes. 1 = smoker, 0 = non-smoker Domiciliary Oxygen Therapy: At-home oxygen therapy, used to treat COPD. This metric measures whether or not a patient uses oxygen therapy, 1 = Yes, 0 = No. Statins: generally used to lower cholesteral in blood, but some studies have recently shown they can be effective in COPD treatment. This metric asks whether or not a patient has used statins in the past year. Long-Acting Muscarinic receptor Antagonists: used for treatment of COPD. This metric asks whether or not a patient has used LAMAs in the past year. Long-Acting β2 Agonists: used for treatment of COPD. This metric asks whether or not a patient has used LABAs in the past year. Inhaled Glucocorticoids: used for treatment of COPD. This metric asks whether or not a patient has used inhaled glucocorticoids in the past year. Prediction % FEV1 Score. Body Mass Index: ratio of weight (kg) to height squared (m^2) St. George's Respiratory Questionnaire: This questionnaire is to help doctors/patients determine how much COPD is affecting day-to-day life. The score from the questionnaire is correlated to cough, sputum, and wheezing symptoms. Questionnaire Download SGRQ Overview Number of exacerbations (severe and mild/moderate) in the last year. Number of severe exacerbations in the last year. Whether the patient was randomized to receive azithromycin. Should be 0 for prediction (0,1) Whether the patient was randomized to receive statins. Should be 0 for prediction (0,1) Whether the patient was randomized to receive LAMAs. Should be 0 for prediction (0,1) Whether the patient was randomized to receive LABAs. Should be 0 for prediction (0,1) Whether the patient was randomized to receive ICs. Should be 0 for prediction (0,1) Exacerbation Rate To get a prediction for exacerbation rate, you will need to pass in a patient vector: results &lt;- predictACCEPT(samplePatients[1,]) print(t(results)) &gt; [,1] &gt; ID &quot;10001&quot; &gt; male &quot;1&quot; &gt; age &quot;70&quot; &gt; smoker &quot;1&quot; &gt; oxygen &quot;1&quot; &gt; statin &quot;1&quot; &gt; LAMA &quot;1&quot; &gt; LABA &quot;1&quot; &gt; ICS &quot;1&quot; &gt; FEV1 &quot;33&quot; &gt; BMI &quot;25&quot; &gt; SGRQ &quot;50&quot; &gt; LastYrExacCount &quot;2&quot; &gt; LastYrSevExacCount &quot;1&quot; &gt; randomized_azithromycin &quot;0&quot; &gt; randomized_statin &quot;0&quot; &gt; randomized_LAMA &quot;0&quot; &gt; randomized_LABA &quot;0&quot; &gt; randomized_ICS &quot;0&quot; &gt; predicted_exac_probability &quot;0.7805344&quot; &gt; predicted_exac_rate &quot;1.804333&quot; &gt; azithromycin_predicted_exac_probability &quot;0.7035189&quot; &gt; azithromycin_predicted_exac_rate &quot;1.399393&quot; &gt; predicted_severe_exac_probability &quot;0.4372629&quot; &gt; predicted_severe_exac_rate &quot;0.7587849&quot; &gt; azithromycin_predicted_severe_exac_probability &quot;0.4235638&quot; &gt; azithromycin_predicted_severe_exac_rate &quot;0.5692841&quot; &gt; predicted_exac_probability_lower_PI &quot;0.4431471&quot; &gt; predicted_exac_probability_upper_PI &quot;0.9809456&quot; &gt; predicted_exac_rate_lower_PI &quot;0.5854542&quot; &gt; predicted_exac_rate_upper_PI &quot;3.960553&quot; &gt; azithromycin_predicted_exac_probability_lower_PI &quot;0.3649572&quot; &gt; azithromycin_predicted_exac_probability_upper_PI &quot;0.953655&quot; &gt; azithromycin_predicted_exac_rate_lower_PI &quot;0.4540629&quot; &gt; azithromycin_predicted_exac_rate_upper_PI &quot;3.071701&quot; &gt; predicted_severe_exac_probability_lower_PI &quot;0.06106759&quot; &gt; predicted_severe_exac_probability_upper_PI &quot;0.8977978&quot; &gt; predicted_severe_exac_rate_lower_PI &quot;0.07269255&quot; &gt; predicted_severe_exac_rate_upper_PI &quot;2.070312&quot; &gt; azithromycin_predicted_severe_exac_probability_lower_PI &quot;0.05703668&quot; &gt; azithromycin_predicted_severe_exac_probability_upper_PI &quot;0.8909441&quot; &gt; azithromycin_predicted_severe_exac_rate_lower_PI &quot;0.05287131&quot; &gt; azithromycin_predicted_severe_exac_rate_upper_PI &quot;1.568341&quot; &gt; predicted_exac_probability_lower_CI &quot;0.7710433&quot; &gt; predicted_exac_probability_upper_CI &quot;0.7894215&quot; &gt; predicted_exac_rate_lower_CI &quot;1.749478&quot; &gt; predicted_exac_rate_upper_CI &quot;1.855288&quot; &gt; azithromycin_predicted_exac_probability_lower_CI &quot;0.6936987&quot; &gt; azithromycin_predicted_exac_probability_upper_CI &quot;0.7129144&quot; &gt; azithromycin_predicted_exac_rate_lower_CI &quot;1.356792&quot; &gt; azithromycin_predicted_exac_rate_upper_CI &quot;1.439708&quot; &gt; predicted_severe_exac_probability_lower_CI &quot;0.4231386&quot; &gt; predicted_severe_exac_probability_upper_CI &quot;0.4514005&quot; &gt; predicted_severe_exac_rate_lower_CI &quot;0.7233501&quot; &gt; predicted_severe_exac_rate_upper_CI &quot;0.7893986&quot; &gt; azithromycin_predicted_severe_exac_probability_lower_CI &quot;0.4093899&quot; &gt; azithromycin_predicted_severe_exac_probability_upper_CI &quot;0.4393187&quot; &gt; azithromycin_predicted_severe_exac_rate_lower_CI &quot;0.5449861&quot; &gt; azithromycin_predicted_severe_exac_rate_upper_CI &quot;0.5934462&quot; The predictACCEPT() function returns a data frame with the original patient data, along with the predictions for different treatment options. Here is a summary of the results: Azithromycin No Treatment Overall Severe Probability Rate Confidence Interval Prediction Interval azithromycin_predicted_ Prediction if the patient is treated with 250 mg / day of azithromycin predicted_ Prediction if patient is not treated with azithromycin exac_ All exacerbations (mild, moderate, severe) severe_exac_ Severe exacerbations only probability Probability of at least one exacerbation next year rate Number of exacerbations / year _upper_CI _lower_CI 95 % confidence interval _upper_PI _lower_PI Prediction Interval To visualize the data, there is a graphing function called plotExacerbations(), which creates a Plotly bar graph. You have the option of selecting probability or rate for which prediction you want to see, and either CI or PI to select the confidence interval or prediction interval respectively. plotExacerbations(results, type=&quot;probability&quot;, interval = &quot;CI&quot;) plotExacerbations(results, type=&quot;probability&quot;, interval = &quot;PI&quot;) plotExacerbations(results, type=&quot;rate&quot;, interval = &quot;CI&quot;) Probability of N Exacerbations (Poisson) We can also calculate the predicted number of exacerbations in a year: patientResults = predictACCEPT(samplePatients[1,]) exacerbationsMatrix = predictCountProb(patientResults, n = 10, shortened = TRUE) print(exacerbationsMatrix) &gt; none severe 1 severe 2 severe 3 or more severe &gt; no exacerbations 0.15760332 0.00000000 0.00000000 0.00000000 &gt; 1 exacerbation 0.16254830 0.12865126 0.00000000 0.00000000 &gt; 2 exacerbations 0.08382422 0.13268784 0.05250888 0.00000000 &gt; 3 or more exacerbations 0.03808929 0.09951727 0.09477260 0.04007167 The shortened parameter groups the probabilities from 3-10 exacerbations into one category, “3 or more exacerbations.” To see all n exacerbation probabilities: exacerbationsMatrix = predictCountProb(patientResults, n = 10, shortened = FALSE) print(exacerbationsMatrix) &gt; 0 severe 1 severe 2 severe 3 severe &gt; 0 exacerbation(s) 1.576033e-01 0.000000e+00 0.000000e+00 0.000000e+00 &gt; 1 exacerbation(s) 1.625483e-01 1.286513e-01 0.000000e+00 0.000000e+00 &gt; 2 exacerbation(s) 8.382422e-02 1.326878e-01 5.250888e-02 0.000000e+00 &gt; 3 exacerbation(s) 2.881810e-02 6.842553e-02 5.415640e-02 1.428763e-02 &gt; 4 exacerbation(s) 7.430575e-03 2.352415e-02 2.792781e-02 1.473592e-02 &gt; 5 exacerbation(s) 1.532744e-03 6.065563e-03 9.601359e-03 7.599138e-03 &gt; 6 exacerbation(s) 2.634725e-04 1.251175e-03 2.475653e-03 2.612523e-03 &gt; 7 exacerbation(s) 3.881990e-05 2.150721e-04 5.106659e-04 6.736235e-04 &gt; 8 exacerbation(s) 5.004739e-06 3.168860e-05 8.778144e-05 1.389518e-04 &gt; 9 exacerbation(s) 5.735299e-07 4.085358e-06 1.293367e-05 2.388527e-05 &gt; 4 severe 5 severe 6 severe 7 severe &gt; 0 exacerbation(s) 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 &gt; 1 exacerbation(s) 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 &gt; 2 exacerbation(s) 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 &gt; 3 exacerbation(s) 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 &gt; 4 exacerbation(s) 2.915740e-03 0.000000e+00 0.000000e+00 0.000000e+00 &gt; 5 exacerbation(s) 3.007225e-03 4.760225e-04 0.000000e+00 0.000000e+00 &gt; 6 exacerbation(s) 1.550790e-03 4.909583e-04 6.476270e-05 0.000000e+00 &gt; 7 exacerbation(s) 5.331493e-04 2.531813e-04 6.679470e-05 7.552236e-06 &gt; 8 exacerbation(s) 1.374694e-04 8.704172e-05 3.444523e-05 7.789196e-06 &gt; 9 exacerbation(s) 2.835652e-05 2.244319e-05 1.184200e-05 4.016796e-06 &gt; 8 severe 9 severe &gt; 0 exacerbation(s) 0.000000e+00 0.000000e+00 &gt; 1 exacerbation(s) 0.000000e+00 0.000000e+00 &gt; 2 exacerbation(s) 0.000000e+00 0.000000e+00 &gt; 3 exacerbation(s) 0.000000e+00 0.000000e+00 &gt; 4 exacerbation(s) 0.000000e+00 0.000000e+00 &gt; 5 exacerbation(s) 0.000000e+00 0.000000e+00 &gt; 6 exacerbation(s) 0.000000e+00 0.000000e+00 &gt; 7 exacerbation(s) 0.000000e+00 0.000000e+00 &gt; 8 exacerbation(s) 7.706093e-07 0.000000e+00 &gt; 9 exacerbation(s) 7.947881e-07 6.989408e-08 To visualize the matrix as a heatmap, we can use the function plotHeatMap: plotHeatMap(patientResults, shortened = FALSE) "],
["section-webapp.html", "4 Using the Web Application", " 4 Using the Web Application We have created a web application which can be found here: ACCEPT Web Application "],
["section-api.html", "5 Using the Package as an API (PRISM) 5.1 PRISM API in Excel 5.2 API in R/Javascript/Python/Bash", " 5 Using the Package as an API (PRISM) PRISM (Programmable Interface for Simulation/Statistical Models) is a package which provides a user-friendly API interface in R for clinical prediction and decision analytics models hosted on UBC PRISM cloud. For more information, the PRISM package can be found on GitHub at PRISM on GitHub. 5.1 PRISM API in Excel One of the primary goals of PRISM is making prediction models accessible to a wide range of audiences, including those with less programming experience. The Excel API is targetted towards users who are less familiar with programming, or users who are familiar with programming and would like an easy way to extract the data quickly. To use the model, you will need to have Excel installed on your computer. Currently, the Excel API only works in Windows (PC), although we are working on developing a version for Mac (OS X) as well. Downloading the Spreadsheet To get started, you will need to go to: PRISM Model Repository. In the row that has the ACCEPT model, go to the column labelled Excel Interface and click on the link ACCEPT Excel (PC). This will download the Excel Interface for the ACCEPT model. Setting the Inputs Once you have downloaded the Excel Interface, you can open it in Excel. You will notice there are 7 sheets, labelled Intro, Settings, Input - Main Parameters, Input - Agent Characteristics, Output - Main Outcomes , Output - Exacerbations, and Output - Severity. You can click on the Intro tab for more information on how to use the Excel API. The Settings tab you don’t need to use. There are 2 input tabs. Click on Input - Main Parameters. The first table contains global parameters. You may change these if you like, or leave the default values: Number of agents Baseline age Time horizon Discount rate for costs Number of people to be included in the dynamic microsimulation. Minimum age of people to be included. Default is set to 40 years old. Number of years to run the simulation for. The second table contains the parameters for the Payoff Module. Running the Model To run the model, you need to connect to the model first. Click on the Output - Main Outcomes sheet. There is a button at the top of the page which says Connect to Model. Click on that button. On the bottom left of the Excel window, you should see the text “Connecting to model…” Click on the Run button. Click on the Disconnect from Model button once it has finished running. Results Once you have run the model, there are 3 sheets with charts to look at the results: Output - Main Outcomes, Output - Exacerbations, and Output - Severity. 5.2 API in R/Javascript/Python/Bash To get started, you will need to install a few packages: brew install curl sudo apt install curl install.packages(\"devtools\") devtools::install_github(\"resplab/prism\") pip3 install requests The next step is to get an API key. For now, we will be giving out API keys on a case-by-case basis, so please email either: Amin Adibi: amin.adibi@ubc.ca Mohsen Sadatsafavi: mohsen.sadatsafavi@ubc.ca Setting the Input To run the model, you can either use the default input, or set your own input. To see what the default input is, you can use the following POST call: curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"get_default_input\"]}' http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"get_default_input\"]}' http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json let arguments = JSON.stringify({ api_key: 'YOUR_API_KEY', func: [\"get_default_input\"] }); request = new XMLHttpRequest(); request.open('POST', 'http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json'); request.setRequestHeader('Content-Type', 'application/json'); request.send(arguments); let results = request.response; library(prism) connect_to_model('acceptPrism', api_key = YOUR_API_KEY) input = get_default_input() import json import requests api_key = 'YOUR_API_KEY' response = requests.post(\"http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json\", json = {\"api_key\":[api_key], \"func\": [\"get_default_input\"]}) print(response) results = json.loads(response.text) print(results) Running the Model To run the model with the default input, you can use the following POST call: curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"prism_model_run\"], \"model_input\":[{}]}' http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"prism_model_run\"], \"model_input\":[{}]}' http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json }]}' http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json curl -Body '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"prism_model_run\"],\"model_input\":[{}]}' -Method POST -uri http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json -Headers @{\"Content-type\"=\"application/json\"} let postData = JSON.stringify({ \"api_key\": \"YOUR_API_KEY\", \"func\": [\"prism_model_run\"], \"model_input\": [{}] }); request.open('POST', 'http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json'); request.setRequestHeader('Content-Type', 'application/json'); request.send(postData); let results = request.response; library(prism) connect_to_model('acceptPrism', api_key = YOUR_API_KEY) results = model_run() api_key = 'YOUR_API_KEY' modelInput = [{}] response = requests.post(\"http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json\", json = {\"api_key\":[api_key], \"func\": [\"prism_model_run\"], \"model_input\": modelInput}) print(response) results = json.loads(response.text) print(results) To set your own input: curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"prism_model_run\"], \"model_input\":[{ \"patient_data\": [{ \"ID\": \"10001\", \"male\": 1, \"age\": 70, \"smoker\": 1, \"oxygen\": 1, \"statin\": 1, \"LAMA\": 1, \"LABA\": 1, \"ICS\": 1, \"FEV1\": 33, \"BMI\": 25, \"SGRQ\": 50, \"LastYrExacCount\": 2, \"LastYrSevExacCount\": 1, \"randomized_azithromycin\": 0, \"randomized_statin\": 0, \"randomized_LAMA\": 0, \"randomized_LABA\": 0, \"randomized_ICS\": 0 }], \"random_sampling_N\": 1000, \"calculate_CIs\": True, \"random_distribution_iteration\": 20000}]}' http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"prism_model_run\"], \"model_input\":[{ \"patient_data\": [{ \"ID\": \"10001\", \"male\": 1, \"age\": 70, \"smoker\": 1, \"oxygen\": 1, \"statin\": 1, \"LAMA\": 1, \"LABA\": 1, \"ICS\": 1, \"FEV1\": 33, \"BMI\": 25, \"SGRQ\": 50, \"LastYrExacCount\": 2, \"LastYrSevExacCount\": 1, \"randomized_azithromycin\": 0, \"randomized_statin\": 0, \"randomized_LAMA\": 0, \"randomized_LABA\": 0, \"randomized_ICS\": 0 }], \"random_sampling_N\": 1000, \"calculate_CIs\": True, \"random_distribution_iteration\": 20000}]}' http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json }]}' http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json curl -Body '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"prism_model_run\"],\"model_input\":[{ \"patient_data\": [{ \"ID\": \"10001\", \"male\": 1, \"age\": 70, \"smoker\": 1, \"oxygen\": 1, \"statin\": 1, \"LAMA\": 1, \"LABA\": 1, \"ICS\": 1, \"FEV1\": 33, \"BMI\": 25, \"SGRQ\": 50, \"LastYrExacCount\": 2, \"LastYrSevExacCount\": 1, \"randomized_azithromycin\": 0, \"randomized_statin\": 0, \"randomized_LAMA\": 0, \"randomized_LABA\": 0, \"randomized_ICS\": 0 }], \"random_sampling_N\": 1000, \"calculate_CIs\": True, \"random_distribution_iteration\": 20000 }]}' -Method POST -uri http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json -Headers @{\"Content-type\"=\"application/json\"} let postData = JSON.stringify({ \"api_key\": \"YOUR_API_KEY\", \"func\": [\"prism_model_run\"], \"model_input\": [{ \"patient_data\": [{ \"ID\": \"10001\", \"male\": 1, \"age\": 70, \"smoker\": 1, \"oxygen\": 1, \"statin\": 1, \"LAMA\": 1, \"LABA\": 1, \"ICS\": 1, \"FEV1\": 33, \"BMI\": 25, \"SGRQ\": 50, \"LastYrExacCount\": 2, \"LastYrSevExacCount\": 1, \"randomized_azithromycin\": 0, \"randomized_statin\": 0, \"randomized_LAMA\": 0, \"randomized_LABA\": 0, \"randomized_ICS\": 0 }], \"random_sampling_N\": 1000, \"calculate_CIs\": True, \"random_distribution_iteration\": 20000 }] }); request.open('POST', 'http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json'); request.setRequestHeader('Content-Type', 'application/json'); request.send(postData); let results = request.response; library(prism) connect_to_model('acceptPrism', api_key = YOUR_API_KEY) model_input = list(patient_data = samplePatients) model_input$random_sampling_N = 1000 model_input$random_distribution_iteration = 20000 model_input$calculate_CIs = TRUE model_run(model_input) results = model_run(model_input) api_key = 'YOUR_API_KEY' modelInput = [{ \"patient_data\": [{ \"ID\": \"10001\", \"male\": 1, \"age\": 70, \"smoker\": 1, \"oxygen\": 1, \"statin\": 1, \"LAMA\": 1, \"LABA\": 1, \"ICS\": 1, \"FEV1\": 33, \"BMI\": 25, \"SGRQ\": 50, \"LastYrExacCount\": 2, \"LastYrSevExacCount\": 1, \"randomized_azithromycin\": 0, \"randomized_statin\": 0, \"randomized_LAMA\": 0, \"randomized_LABA\": 0, \"randomized_ICS\": 0 }], \"random_sampling_N\": 1000, \"calculate_CIs\": True, \"random_distribution_iteration\": 20000 }] response = requests.post(\"http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json\", json = {\"api_key\":[api_key], \"func\": [\"prism_model_run\"], \"model_input\": modelInput}) print(response) results = json.loads(response.text) print(results) "],
["section-appendix1.html", "6 Appendix 1: Installing R 6.1 Step 1: Mirrors 6.2 Mac OS X 6.3 Windows", " 6 Appendix 1: Installing R This is a guide to installing R, geared mainly at beginner audiences. All the information below can be found at https://www.r-project.org/; I’ve just simplified it a bit. 6.1 Step 1: Mirrors When you go the the R home page, you will see a link to download R, which will take you to a list of mirrors. They are organized by country, so click on one that is close to your location. Since our group is based out of Vancouver, I will select one of the mirrors in Canada: SFU Mirror. Once you have clicked on the closest mirror, you will be asked to choose what type of computer you have. 6.2 Mac OS X If you are using a Mac (Apple) computer, click on the link for Mac OS X. You will be redirected to a page that says “R for Mac OS X.” To install R, you want to click on one of the files ending in “.pkg”. If your operating system is fairly up-to-date, scroll to “Latest Release” and click on the file that looks like “R-3.X.Y.pkg,” with X and Y being numbers for the latest release. R should begin downloading, and your Mac package manager will pop up with the rest of the instructions. If your operating system is older, you might want to scroll down to “Legacy Releases,” and download one of those “.pkg” files instead. It should tell you on the page what version your computer should use. 6.3 Windows If you are using Windows, click on the link for Windows. You will be redirected to a page that says “R for Windows.” To install R, click on the link “base,” and on the next page, “Download R 3.X.Y for Windows,” where X and Y are the version numbers for the latest release. R should begin downloading. "]
]
